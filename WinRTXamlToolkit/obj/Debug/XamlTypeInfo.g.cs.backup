//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks","4.0.0.0")]
    public sealed class XamlMetaDataProvider: global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_CameraCaptureControl() { return new global::WinRTXamlToolkit.Controls.CameraCaptureControl(); }

        private object Activate_8_BooleanToVisibilityConverter() { return new global::WinRTXamlToolkit.Converters.BooleanToVisibilityConverter(); }

        private object Activate_9_LayoutTransformControl() { return new global::WinRTXamlToolkit.Controls.LayoutTransformControl(); }

        private object Activate_10_CustomAppBar() { return new global::WinRTXamlToolkit.Controls.CustomAppBar(); }

        private object Activate_11_CountdownControl() { return new global::WinRTXamlToolkit.Controls.CountdownControl(); }

        private object Activate_12_CascadingImageControl() { return new global::WinRTXamlToolkit.Controls.CascadingImageControl(); }

        private object Activate_16_CascadingTextBlock() { return new global::WinRTXamlToolkit.Controls.CascadingTextBlock(); }

        private object Activate_17_TrianglePicker() { return new global::WinRTXamlToolkit.Controls.TrianglePicker(); }

        private object Activate_18_HueRingPicker() { return new global::WinRTXamlToolkit.Controls.HueRingPicker(); }

        private object Activate_19_ColorPicker() { return new global::WinRTXamlToolkit.Controls.ColorPicker(); }

        private object Activate_20_CustomGridSplitter() { return new global::WinRTXamlToolkit.Controls.CustomGridSplitter(); }

        private object Activate_23_NumericUpDown() { return new global::WinRTXamlToolkit.Controls.NumericUpDown(); }

        private object Activate_25_RingSlice() { return new global::WinRTXamlToolkit.Controls.RingSlice(); }

        private object Activate_27_DelayedLoadControl() { return new global::WinRTXamlToolkit.Controls.DelayedLoadControl(); }

        private object Activate_28_ImageButton() { return new global::WinRTXamlToolkit.Controls.ImageButton(); }

        private object Activate_30_ImageToggleButton() { return new global::WinRTXamlToolkit.Controls.ImageToggleButton(); }

        private object Activate_31_InputDialog() { return new global::WinRTXamlToolkit.Controls.InputDialog(); }

        private object Activate_32_TreeViewItem() { return new global::WinRTXamlToolkit.Controls.TreeViewItem(); }

        private object Activate_33_HeaderedItemsControl() { return new global::WinRTXamlToolkit.Controls.HeaderedItemsControl(); }

        private object Activate_34_TreeView() { return new global::WinRTXamlToolkit.Controls.TreeView(); }

        private object Activate_35_WatermarkTextBox() { return new global::WinRTXamlToolkit.Controls.WatermarkTextBox(); }

        private object Activate_36_WebBrowser() { return new global::WinRTXamlToolkit.Controls.WebBrowser(); }

        private object Activate_38_ClipToBoundsHandler() { return new global::WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler(); }

        private object Activate_41_CursorDisplayHandler() { return new global::WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler(); }

        private object Activate_42_GridSplitterPreviewControl() { return new global::WinRTXamlToolkit.Controls.GridSplitterPreviewControl(); }

        private object Activate_43_ListItemButton() { return new global::WinRTXamlToolkit.Controls.ListItemButton(); }

        private object Activate_45_NullableBoolToVisibilityConverter() { return new global::WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter(); }

        private object Activate_46_NullableBoolToBoolConverter() { return new global::WinRTXamlToolkit.Converters.NullableBoolToBoolConverter(); }

        private object Activate_47_AlternativeFrame() { return new global::WinRTXamlToolkit.Controls.AlternativeFrame(); }

        private object Activate_48_Stack() { return new global::System.Collections.Generic.Stack<global::WinRTXamlToolkit.Controls.JournalEntry>(); }

        private object Activate_49_JournalEntry() { return new global::WinRTXamlToolkit.Controls.JournalEntry(); }

        private object Activate_53_AnimatingContainer() { return new global::WinRTXamlToolkit.Controls.AnimatingContainer(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Boolean":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Object":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Int32":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.FrameworkElement":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.FrameworkElement));
                break;

            case "Windows.UI.Xaml.Media.Transform":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Transform));
                break;

            case "Windows.UI.Xaml.Controls.ContentControl":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ContentControl));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Media.ImageSource":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.ImageSource));
                break;

            case "Windows.UI.Xaml.Media.Animation.EasingFunctionBase":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Double":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Windows.UI.Xaml.Controls.Primitives.RangeBase":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Primitives.RangeBase));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Windows.UI.Xaml.Shapes.Path":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Shapes.Path));
                break;

            case "Windows.UI.Xaml.Controls.Button":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Button));
                break;

            case "Windows.UI.Xaml.Media.Stretch":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Stretch));
                break;

            case "Windows.UI.Xaml.Controls.Primitives.ToggleButton":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton));
                break;

            case "Windows.UI.Xaml.Controls.Orientation":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Orientation));
                break;

            case "Windows.UI.Xaml.Controls.ItemsControl":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.ItemsControl));
                break;

            case "Windows.UI.Xaml.Controls.TextBox":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.TextBox));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "WinRTXamlToolkit.Controls.CameraCaptureControl":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CameraCaptureControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_CameraCaptureControl;
                userType.AddMemberName("ShowOnLoad");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PreferredCameraType");
                userType.AddMemberName("VideoDevice");
                userType.AddMemberName("AudioDevice");
                userType.AddMemberName("VideoDeviceId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AudioDeviceId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("VideoDeviceName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AudioDeviceName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PickVideoDeviceAutomatically");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PickAudioDeviceAutomatically");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("StreamingCaptureMode");
                userType.AddMemberName("VideoEncodingQuality");
                userType.AddMemberName("VideoDeviceEnclosureLocation");
                userType.AddMemberName("PhotoCaptureCountdownSeconds");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "Windows.Devices.Enumeration.Panel":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Devices.Enumeration.Panel), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Unknown", global::Windows.Devices.Enumeration.Panel.Unknown);
                userType.AddEnumValue("Front", global::Windows.Devices.Enumeration.Panel.Front);
                userType.AddEnumValue("Back", global::Windows.Devices.Enumeration.Panel.Back);
                userType.AddEnumValue("Top", global::Windows.Devices.Enumeration.Panel.Top);
                userType.AddEnumValue("Bottom", global::Windows.Devices.Enumeration.Panel.Bottom);
                userType.AddEnumValue("Left", global::Windows.Devices.Enumeration.Panel.Left);
                userType.AddEnumValue("Right", global::Windows.Devices.Enumeration.Panel.Right);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Windows.Devices.Enumeration.DeviceInformation":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Devices.Enumeration.DeviceInformation), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Windows.Media.Capture.StreamingCaptureMode":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Media.Capture.StreamingCaptureMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("AudioAndVideo", global::Windows.Media.Capture.StreamingCaptureMode.AudioAndVideo);
                userType.AddEnumValue("Audio", global::Windows.Media.Capture.StreamingCaptureMode.Audio);
                userType.AddEnumValue("Video", global::Windows.Media.Capture.StreamingCaptureMode.Video);
                xamlType = userType;
                break;

            case "Windows.Media.MediaProperties.VideoEncodingQuality":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Media.MediaProperties.VideoEncodingQuality), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Windows.Media.MediaProperties.VideoEncodingQuality.Auto);
                userType.AddEnumValue("HD1080p", global::Windows.Media.MediaProperties.VideoEncodingQuality.HD1080p);
                userType.AddEnumValue("HD720p", global::Windows.Media.MediaProperties.VideoEncodingQuality.HD720p);
                userType.AddEnumValue("Wvga", global::Windows.Media.MediaProperties.VideoEncodingQuality.Wvga);
                userType.AddEnumValue("Ntsc", global::Windows.Media.MediaProperties.VideoEncodingQuality.Ntsc);
                userType.AddEnumValue("Pal", global::Windows.Media.MediaProperties.VideoEncodingQuality.Pal);
                userType.AddEnumValue("Vga", global::Windows.Media.MediaProperties.VideoEncodingQuality.Vga);
                userType.AddEnumValue("Qvga", global::Windows.Media.MediaProperties.VideoEncodingQuality.Qvga);
                xamlType = userType;
                break;

            case "Windows.Devices.Enumeration.EnclosureLocation":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.Devices.Enumeration.EnclosureLocation), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Converters.BooleanToVisibilityConverter":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Converters.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_BooleanToVisibilityConverter;
                userType.AddMemberName("IsReversed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsInversed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.LayoutTransformControl":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.LayoutTransformControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_9_LayoutTransformControl;
                userType.SetContentPropertyName("WinRTXamlToolkit.Controls.LayoutTransformControl.Child");
                userType.AddMemberName("Child");
                userType.AddMemberName("Transform");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CustomAppBar":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CustomAppBar), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_10_CustomAppBar;
                userType.AddMemberName("IsOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanDismiss");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanOpenInSnappedView");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsLightDismissEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CountdownControl":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CountdownControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_CountdownControl;
                userType.AddMemberName("Seconds");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CascadingImageControl":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CascadingImageControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_12_CascadingImageControl;
                userType.AddMemberName("Columns");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Rows");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ImageSource");
                userType.AddMemberName("ColumnDelay");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("RowDelay");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("TileDuration");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("CascadeDirection");
                userType.AddMemberName("CascadeInEasingFunction");
                userType.AddMemberName("CascadeSequence");
                xamlType = userType;
                break;

            case "TimeSpan":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.TimeSpan), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CascadeDirection":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CascadeDirection), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("TopLeft", global::WinRTXamlToolkit.Controls.CascadeDirection.TopLeft);
                userType.AddEnumValue("TopRight", global::WinRTXamlToolkit.Controls.CascadeDirection.TopRight);
                userType.AddEnumValue("BottomRight", global::WinRTXamlToolkit.Controls.CascadeDirection.BottomRight);
                userType.AddEnumValue("BottomLeft", global::WinRTXamlToolkit.Controls.CascadeDirection.BottomLeft);
                userType.AddEnumValue("Random", global::WinRTXamlToolkit.Controls.CascadeDirection.Random);
                userType.AddEnumValue("Shuffle", global::WinRTXamlToolkit.Controls.CascadeDirection.Shuffle);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CascadeSequence":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CascadeSequence), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("EndTogether", global::WinRTXamlToolkit.Controls.CascadeSequence.EndTogether);
                userType.AddEnumValue("EqualDuration", global::WinRTXamlToolkit.Controls.CascadeSequence.EqualDuration);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CascadingTextBlock":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CascadingTextBlock), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_CascadingTextBlock;
                userType.AddMemberName("AnimateOnLoaded");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TextBlockTemplate");
                userType.AddMemberName("StartDelay");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("CascadeIn");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CascadeOut");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("HoldDuration");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("HoldDurationString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CascadeInDuration");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("CascadeInDurationString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CascadeOutDuration");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("CascadeOutDurationString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CascadeInterval");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("CascadeIntervalString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CascadeInEasingFunction");
                userType.AddMemberName("CascadeOutEasingFunction");
                userType.AddMemberName("FromVerticalOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ToVerticalOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("FromRotation");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ToRotation");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("UseFade");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("UseRotation");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("FadeInEasingFunction");
                userType.AddMemberName("FadeOutEasingFunction");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.TrianglePicker":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.TrianglePicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_17_TrianglePicker;
                userType.AddMemberName("X");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Y");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.HueRingPicker":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.HueRingPicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.RangeBase"));
                userType.Activator = Activate_18_HueRingPicker;
                userType.AddMemberName("ThumbBorderBrush");
                userType.AddMemberName("ThumbBorderThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ThumbBackground");
                userType.AddMemberName("RingThickness");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ThumbArcAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.ColorPicker":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.ColorPicker), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_19_ColorPicker;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.CustomGridSplitter":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.CustomGridSplitter), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_20_CustomGridSplitter;
                userType.AddMemberName("ResizeBehavior");
                userType.AddMemberName("ResizeDirection");
                userType.AddMemberName("KeyboardIncrement");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ShowsPreview");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("PreviewStyle");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.GridResizeBehavior":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.GridResizeBehavior), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("BasedOnAlignment", global::WinRTXamlToolkit.Controls.GridResizeBehavior.BasedOnAlignment);
                userType.AddEnumValue("CurrentAndNext", global::WinRTXamlToolkit.Controls.GridResizeBehavior.CurrentAndNext);
                userType.AddEnumValue("PreviousAndCurrent", global::WinRTXamlToolkit.Controls.GridResizeBehavior.PreviousAndCurrent);
                userType.AddEnumValue("PreviousAndNext", global::WinRTXamlToolkit.Controls.GridResizeBehavior.PreviousAndNext);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.GridResizeDirection":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.GridResizeDirection), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::WinRTXamlToolkit.Controls.GridResizeDirection.Auto);
                userType.AddEnumValue("Columns", global::WinRTXamlToolkit.Controls.GridResizeDirection.Columns);
                userType.AddEnumValue("Rows", global::WinRTXamlToolkit.Controls.GridResizeDirection.Rows);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.NumericUpDown":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.NumericUpDown), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.RangeBase"));
                userType.Activator = Activate_23_NumericUpDown;
                userType.AddMemberName("ValueFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ValueBarVisibility");
                userType.AddMemberName("IsReadOnly");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.NumericUpDownValueBarVisibility":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.NumericUpDownValueBarVisibility), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Visible", global::WinRTXamlToolkit.Controls.NumericUpDownValueBarVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::WinRTXamlToolkit.Controls.NumericUpDownValueBarVisibility.Collapsed);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.RingSlice":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.RingSlice), GetXamlTypeByName("Windows.UI.Xaml.Shapes.Path"));
                userType.Activator = Activate_25_RingSlice;
                userType.AddMemberName("StartAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("EndAngle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Radius");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("InnerRadius");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Center");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::Windows.Foundation.Point>),
                                                   "System.Nullable<Windows.Foundation.Point>");
                xamlType = userType;
                break;

            case "System.Nullable<Windows.Foundation.Point>":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::Windows.Foundation.Point>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::Windows.Foundation.Point>),
                                                   "System.Nullable<Windows.Foundation.Point>");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.DelayedLoadControl":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.DelayedLoadControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_27_DelayedLoadControl;
                userType.AddMemberName("Delay");
                AddToMapOfTypeToStandardName(typeof(global::System.TimeSpan),
                                                   "TimeSpan");
                userType.AddMemberName("ContentTemplate");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.ImageButton":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.ImageButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Button"));
                userType.Activator = Activate_28_ImageButton;
                userType.AddMemberName("Stretch");
                userType.AddMemberName("RecyclePressedStateImageForHover");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("NormalStateImageSource");
                userType.AddMemberName("HoverStateImageSource");
                userType.AddMemberName("PressedStateImageSource");
                userType.AddMemberName("DisabledStateImageSource");
                userType.AddMemberName("NormalStateImageUriSource");
                userType.AddMemberName("HoverStateImageUriSource");
                userType.AddMemberName("PressedStateImageUriSource");
                userType.AddMemberName("DisabledStateImageUriSource");
                userType.AddMemberName("GenerateMissingImages");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("GeneratedHoverStateLightenAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedPressedStateLightenAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedDisabledStateGrayscaleAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "System.Uri":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Uri), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.ImageToggleButton":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.ImageToggleButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.Primitives.ToggleButton"));
                userType.Activator = Activate_30_ImageToggleButton;
                userType.AddMemberName("Stretch");
                userType.AddMemberName("RecyclePressedStateImageForHover");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("RecycleUncheckedStateImagesForCheckedStates");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("NormalStateImageSource");
                userType.AddMemberName("HoverStateImageSource");
                userType.AddMemberName("PressedStateImageSource");
                userType.AddMemberName("DisabledStateImageSource");
                userType.AddMemberName("CheckedStateImageSource");
                userType.AddMemberName("CheckedHoverStateImageSource");
                userType.AddMemberName("CheckedPressedStateImageSource");
                userType.AddMemberName("CheckedDisabledStateImageSource");
                userType.AddMemberName("NormalStateImageUriSource");
                userType.AddMemberName("HoverStateImageUriSource");
                userType.AddMemberName("PressedStateImageUriSource");
                userType.AddMemberName("DisabledStateImageUriSource");
                userType.AddMemberName("CheckedStateImageUriSource");
                userType.AddMemberName("CheckedHoverStateImageUriSource");
                userType.AddMemberName("CheckedPressedStateImageUriSource");
                userType.AddMemberName("CheckedDisabledStateImageUriSource");
                userType.AddMemberName("GenerateMissingImages");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("GeneratedHoverStateLightenAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedPressedStateLightenAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedDisabledStateGrayscaleAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedCheckedStateLightenAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedCheckedHoverStateLightenAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedCheckedPressedStateLightenAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("GeneratedCheckedDisabledStateGrayscaleAmount");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.InputDialog":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.InputDialog), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_31_InputDialog;
                userType.AddMemberName("BackgroundScreenBrush");
                userType.AddMemberName("BackgroundStripeBrush");
                userType.AddMemberName("TitleStyle");
                userType.AddMemberName("TextStyle");
                userType.AddMemberName("InputTextStyle");
                userType.AddMemberName("ButtonStyle");
                userType.AddMemberName("InputText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AcceptButton");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CancelButton");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsLightDismissEnabled");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("AwaitsCloseTransition");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ButtonsPanelOrientation");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.TreeViewItem":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.TreeViewItem), GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl"));
                userType.Activator = Activate_32_TreeViewItem;
                userType.AddMemberName("HasItems");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsExpanded");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSelected");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsSelectionActive");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.HeaderedItemsControl":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.HeaderedItemsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_33_HeaderedItemsControl;
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ItemContainerStyle");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.TreeView":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.TreeView), GetXamlTypeByName("Windows.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_34_TreeView;
                userType.AddMemberName("SelectedItem");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectedValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectedValuePath");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.WatermarkTextBox":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.WatermarkTextBox), GetXamlTypeByName("Windows.UI.Xaml.Controls.TextBox"));
                userType.Activator = Activate_35_WatermarkTextBox;
                userType.AddMemberName("WatermarkTextStyle");
                userType.AddMemberName("Watermark");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("WatermarkText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.WebBrowser":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.WebBrowser), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_36_WebBrowser;
                userType.AddMemberName("AutoNavigate");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Source");
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions), GetXamlTypeByName("Object"));
                userType.AddMemberName("ClipToBounds");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ClipToBoundsHandler");
                userType.AddMemberName("Cursor");
                userType.AddMemberName("SystemCursor");
                userType.AddMemberName("CursorDisplayHandler");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler), GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_ClipToBoundsHandler;
                xamlType = userType;
                break;

            case "Windows.UI.Core.CoreCursor":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Core.CoreCursor), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "Windows.UI.Core.CoreCursorType":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Core.CoreCursorType), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Arrow", global::Windows.UI.Core.CoreCursorType.Arrow);
                userType.AddEnumValue("Cross", global::Windows.UI.Core.CoreCursorType.Cross);
                userType.AddEnumValue("Custom", global::Windows.UI.Core.CoreCursorType.Custom);
                userType.AddEnumValue("Hand", global::Windows.UI.Core.CoreCursorType.Hand);
                userType.AddEnumValue("Help", global::Windows.UI.Core.CoreCursorType.Help);
                userType.AddEnumValue("IBeam", global::Windows.UI.Core.CoreCursorType.IBeam);
                userType.AddEnumValue("SizeAll", global::Windows.UI.Core.CoreCursorType.SizeAll);
                userType.AddEnumValue("SizeNortheastSouthwest", global::Windows.UI.Core.CoreCursorType.SizeNortheastSouthwest);
                userType.AddEnumValue("SizeNorthSouth", global::Windows.UI.Core.CoreCursorType.SizeNorthSouth);
                userType.AddEnumValue("SizeNorthwestSoutheast", global::Windows.UI.Core.CoreCursorType.SizeNorthwestSoutheast);
                userType.AddEnumValue("SizeWestEast", global::Windows.UI.Core.CoreCursorType.SizeWestEast);
                userType.AddEnumValue("UniversalNo", global::Windows.UI.Core.CoreCursorType.UniversalNo);
                userType.AddEnumValue("UpArrow", global::Windows.UI.Core.CoreCursorType.UpArrow);
                userType.AddEnumValue("Wait", global::Windows.UI.Core.CoreCursorType.Wait);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler), GetXamlTypeByName("Object"));
                userType.Activator = Activate_41_CursorDisplayHandler;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.GridSplitterPreviewControl":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.GridSplitterPreviewControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_42_GridSplitterPreviewControl;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.ListItemButton":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.ListItemButton), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_43_ListItemButton;
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_NullableBoolToVisibilityConverter;
                userType.AddMemberName("TrueIsVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReversed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Converters.NullableBoolToBoolConverter":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Converters.NullableBoolToBoolConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_46_NullableBoolToBoolConverter;
                userType.AddMemberName("IsReversed");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.AlternativeFrame":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.AlternativeFrame), GetXamlTypeByName("Windows.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_47_AlternativeFrame;
                userType.AddMemberName("PagePresenterStyle");
                userType.AddMemberName("BackStack");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Stack<global::WinRTXamlToolkit.Controls.JournalEntry>),
                                                   "System.Collections.Generic.Stack<WinRTXamlToolkit.Controls.JournalEntry>");
                userType.AddMemberName("CurrentJournalEntry");
                userType.AddMemberName("ForwardStack");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Stack<global::WinRTXamlToolkit.Controls.JournalEntry>),
                                                   "System.Collections.Generic.Stack<WinRTXamlToolkit.Controls.JournalEntry>");
                userType.AddMemberName("CurrentSourcePageType");
                userType.AddMemberName("CacheSize");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("PageTransition");
                userType.AddMemberName("CanGoBack");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanGoForward");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("CanNavigate");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("ShouldWaitForImagesToLoad");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.Boolean>),
                                                   "System.Nullable<Boolean>");
                userType.AddMemberName("BackStackDepth");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("ForwardStackDepth");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "System.Collections.Generic.Stack<WinRTXamlToolkit.Controls.JournalEntry>":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.Stack<global::WinRTXamlToolkit.Controls.JournalEntry>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Stack<global::WinRTXamlToolkit.Controls.JournalEntry>),
                                                   "System.Collections.Generic.Stack<WinRTXamlToolkit.Controls.JournalEntry>");
                userType.Activator = Activate_48_Stack;
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.JournalEntry":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.JournalEntry), GetXamlTypeByName("Object"));
                userType.Activator = Activate_49_JournalEntry;
                xamlType = userType;
                break;

            case "System.Type":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Type), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.PageTransition":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.PageTransition), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                xamlType = userType;
                break;

            case "System.Nullable<Boolean>":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.Boolean>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.Boolean>),
                                                   "System.Nullable<Boolean>");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.AnimatingContainer":
                userType = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.AnimatingContainer), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_53_AnimatingContainer;
                userType.SetContentPropertyName("WinRTXamlToolkit.Controls.AnimatingContainer.RotatingContent");
                userType.AddMemberName("RotatingContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("RadiusX");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("RadiusY");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Duration");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PulseScale");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("AutoPlay");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsAnimating");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_CameraCaptureControl_ShowOnLoad(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.ShowOnLoad;
        }
        private void set_0_CameraCaptureControl_ShowOnLoad(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.ShowOnLoad = (global::System.Boolean)Value;
        }
        private object get_1_CameraCaptureControl_PreferredCameraType(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.PreferredCameraType;
        }
        private void set_1_CameraCaptureControl_PreferredCameraType(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.PreferredCameraType = (global::Windows.Devices.Enumeration.Panel)Value;
        }
        private object get_2_CameraCaptureControl_VideoDevice(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.VideoDevice;
        }
        private object get_3_CameraCaptureControl_AudioDevice(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.AudioDevice;
        }
        private void set_3_CameraCaptureControl_AudioDevice(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.AudioDevice = (global::Windows.Devices.Enumeration.DeviceInformation)Value;
        }
        private object get_4_CameraCaptureControl_VideoDeviceId(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.VideoDeviceId;
        }
        private void set_4_CameraCaptureControl_VideoDeviceId(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.VideoDeviceId = (global::System.String)Value;
        }
        private object get_5_CameraCaptureControl_AudioDeviceId(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.AudioDeviceId;
        }
        private void set_5_CameraCaptureControl_AudioDeviceId(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.AudioDeviceId = (global::System.String)Value;
        }
        private object get_6_CameraCaptureControl_VideoDeviceName(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.VideoDeviceName;
        }
        private object get_7_CameraCaptureControl_AudioDeviceName(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.AudioDeviceName;
        }
        private object get_8_CameraCaptureControl_PickVideoDeviceAutomatically(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.PickVideoDeviceAutomatically;
        }
        private void set_8_CameraCaptureControl_PickVideoDeviceAutomatically(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.PickVideoDeviceAutomatically = (global::System.Boolean)Value;
        }
        private object get_9_CameraCaptureControl_PickAudioDeviceAutomatically(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.PickAudioDeviceAutomatically;
        }
        private void set_9_CameraCaptureControl_PickAudioDeviceAutomatically(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.PickAudioDeviceAutomatically = (global::System.Boolean)Value;
        }
        private object get_10_CameraCaptureControl_StreamingCaptureMode(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.StreamingCaptureMode;
        }
        private void set_10_CameraCaptureControl_StreamingCaptureMode(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.StreamingCaptureMode = (global::Windows.Media.Capture.StreamingCaptureMode)Value;
        }
        private object get_11_CameraCaptureControl_VideoEncodingQuality(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.VideoEncodingQuality;
        }
        private void set_11_CameraCaptureControl_VideoEncodingQuality(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.VideoEncodingQuality = (global::Windows.Media.MediaProperties.VideoEncodingQuality)Value;
        }
        private object get_12_CameraCaptureControl_VideoDeviceEnclosureLocation(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.VideoDeviceEnclosureLocation;
        }
        private object get_13_CameraCaptureControl_PhotoCaptureCountdownSeconds(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            return that.PhotoCaptureCountdownSeconds;
        }
        private void set_13_CameraCaptureControl_PhotoCaptureCountdownSeconds(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CameraCaptureControl)instance;
            that.PhotoCaptureCountdownSeconds = (global::System.Int32)Value;
        }
        private object get_14_BooleanToVisibilityConverter_IsReversed(object instance)
        {
            var that = (global::WinRTXamlToolkit.Converters.BooleanToVisibilityConverter)instance;
            return that.IsReversed;
        }
        private void set_14_BooleanToVisibilityConverter_IsReversed(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Converters.BooleanToVisibilityConverter)instance;
            that.IsReversed = (global::System.Boolean)Value;
        }
        private object get_15_BooleanToVisibilityConverter_IsInversed(object instance)
        {
            var that = (global::WinRTXamlToolkit.Converters.BooleanToVisibilityConverter)instance;
            return that.IsInversed;
        }
        private void set_15_BooleanToVisibilityConverter_IsInversed(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Converters.BooleanToVisibilityConverter)instance;
            that.IsInversed = (global::System.Boolean)Value;
        }
        private object get_16_LayoutTransformControl_Child(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.LayoutTransformControl)instance;
            return that.Child;
        }
        private void set_16_LayoutTransformControl_Child(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.LayoutTransformControl)instance;
            that.Child = (global::Windows.UI.Xaml.FrameworkElement)Value;
        }
        private object get_17_LayoutTransformControl_Transform(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.LayoutTransformControl)instance;
            return that.Transform;
        }
        private void set_17_LayoutTransformControl_Transform(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.LayoutTransformControl)instance;
            that.Transform = (global::Windows.UI.Xaml.Media.Transform)Value;
        }
        private object get_18_CustomAppBar_IsOpen(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.IsOpen;
        }
        private void set_18_CustomAppBar_IsOpen(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_19_CustomAppBar_CanDismiss(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.CanDismiss;
        }
        private void set_19_CustomAppBar_CanDismiss(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.CanDismiss = (global::System.Boolean)Value;
        }
        private object get_20_CustomAppBar_CanOpen(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.CanOpen;
        }
        private void set_20_CustomAppBar_CanOpen(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.CanOpen = (global::System.Boolean)Value;
        }
        private object get_21_CustomAppBar_CanOpenInSnappedView(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.CanOpenInSnappedView;
        }
        private void set_21_CustomAppBar_CanOpenInSnappedView(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.CanOpenInSnappedView = (global::System.Boolean)Value;
        }
        private object get_22_CustomAppBar_IsLightDismissEnabled(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_22_CustomAppBar_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomAppBar)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_23_CountdownControl_Seconds(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CountdownControl)instance;
            return that.Seconds;
        }
        private void set_23_CountdownControl_Seconds(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CountdownControl)instance;
            that.Seconds = (global::System.Int32)Value;
        }
        private object get_24_CascadingImageControl_Columns(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.Columns;
        }
        private void set_24_CascadingImageControl_Columns(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.Columns = (global::System.Int32)Value;
        }
        private object get_25_CascadingImageControl_Rows(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.Rows;
        }
        private void set_25_CascadingImageControl_Rows(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.Rows = (global::System.Int32)Value;
        }
        private object get_26_CascadingImageControl_ImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.ImageSource;
        }
        private void set_26_CascadingImageControl_ImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.ImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_27_CascadingImageControl_ColumnDelay(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.ColumnDelay;
        }
        private void set_27_CascadingImageControl_ColumnDelay(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.ColumnDelay = (global::System.TimeSpan)Value;
        }
        private object get_28_CascadingImageControl_RowDelay(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.RowDelay;
        }
        private void set_28_CascadingImageControl_RowDelay(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.RowDelay = (global::System.TimeSpan)Value;
        }
        private object get_29_CascadingImageControl_TileDuration(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.TileDuration;
        }
        private void set_29_CascadingImageControl_TileDuration(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.TileDuration = (global::System.TimeSpan)Value;
        }
        private object get_30_CascadingImageControl_CascadeDirection(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.CascadeDirection;
        }
        private void set_30_CascadingImageControl_CascadeDirection(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.CascadeDirection = (global::WinRTXamlToolkit.Controls.CascadeDirection)Value;
        }
        private object get_31_CascadingImageControl_CascadeInEasingFunction(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.CascadeInEasingFunction;
        }
        private void set_31_CascadingImageControl_CascadeInEasingFunction(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.CascadeInEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_32_CascadingImageControl_CascadeSequence(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            return that.CascadeSequence;
        }
        private void set_32_CascadingImageControl_CascadeSequence(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingImageControl)instance;
            that.CascadeSequence = (global::WinRTXamlToolkit.Controls.CascadeSequence)Value;
        }
        private object get_33_CascadingTextBlock_AnimateOnLoaded(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.AnimateOnLoaded;
        }
        private void set_33_CascadingTextBlock_AnimateOnLoaded(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.AnimateOnLoaded = (global::System.Boolean)Value;
        }
        private object get_34_CascadingTextBlock_Text(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.Text;
        }
        private void set_34_CascadingTextBlock_Text(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_35_CascadingTextBlock_TextBlockTemplate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.TextBlockTemplate;
        }
        private void set_35_CascadingTextBlock_TextBlockTemplate(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.TextBlockTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_36_CascadingTextBlock_StartDelay(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.StartDelay;
        }
        private void set_36_CascadingTextBlock_StartDelay(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.StartDelay = (global::System.Int32)Value;
        }
        private object get_37_CascadingTextBlock_CascadeIn(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeIn;
        }
        private void set_37_CascadingTextBlock_CascadeIn(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeIn = (global::System.Boolean)Value;
        }
        private object get_38_CascadingTextBlock_CascadeOut(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeOut;
        }
        private void set_38_CascadingTextBlock_CascadeOut(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeOut = (global::System.Boolean)Value;
        }
        private object get_39_CascadingTextBlock_HoldDuration(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.HoldDuration;
        }
        private void set_39_CascadingTextBlock_HoldDuration(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.HoldDuration = (global::System.TimeSpan)Value;
        }
        private object get_40_CascadingTextBlock_HoldDurationString(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.HoldDurationString;
        }
        private void set_40_CascadingTextBlock_HoldDurationString(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.HoldDurationString = (global::System.String)Value;
        }
        private object get_41_CascadingTextBlock_CascadeInDuration(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeInDuration;
        }
        private void set_41_CascadingTextBlock_CascadeInDuration(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeInDuration = (global::System.TimeSpan)Value;
        }
        private object get_42_CascadingTextBlock_CascadeInDurationString(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeInDurationString;
        }
        private void set_42_CascadingTextBlock_CascadeInDurationString(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeInDurationString = (global::System.String)Value;
        }
        private object get_43_CascadingTextBlock_CascadeOutDuration(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeOutDuration;
        }
        private void set_43_CascadingTextBlock_CascadeOutDuration(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeOutDuration = (global::System.TimeSpan)Value;
        }
        private object get_44_CascadingTextBlock_CascadeOutDurationString(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeOutDurationString;
        }
        private void set_44_CascadingTextBlock_CascadeOutDurationString(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeOutDurationString = (global::System.String)Value;
        }
        private object get_45_CascadingTextBlock_CascadeInterval(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeInterval;
        }
        private void set_45_CascadingTextBlock_CascadeInterval(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeInterval = (global::System.TimeSpan)Value;
        }
        private object get_46_CascadingTextBlock_CascadeIntervalString(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeIntervalString;
        }
        private void set_46_CascadingTextBlock_CascadeIntervalString(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeIntervalString = (global::System.String)Value;
        }
        private object get_47_CascadingTextBlock_CascadeInEasingFunction(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeInEasingFunction;
        }
        private void set_47_CascadingTextBlock_CascadeInEasingFunction(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeInEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_48_CascadingTextBlock_CascadeOutEasingFunction(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.CascadeOutEasingFunction;
        }
        private void set_48_CascadingTextBlock_CascadeOutEasingFunction(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.CascadeOutEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_49_CascadingTextBlock_FromVerticalOffset(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.FromVerticalOffset;
        }
        private void set_49_CascadingTextBlock_FromVerticalOffset(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.FromVerticalOffset = (global::System.Double)Value;
        }
        private object get_50_CascadingTextBlock_ToVerticalOffset(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.ToVerticalOffset;
        }
        private void set_50_CascadingTextBlock_ToVerticalOffset(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.ToVerticalOffset = (global::System.Double)Value;
        }
        private object get_51_CascadingTextBlock_FromRotation(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.FromRotation;
        }
        private void set_51_CascadingTextBlock_FromRotation(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.FromRotation = (global::System.Double)Value;
        }
        private object get_52_CascadingTextBlock_ToRotation(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.ToRotation;
        }
        private void set_52_CascadingTextBlock_ToRotation(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.ToRotation = (global::System.Double)Value;
        }
        private object get_53_CascadingTextBlock_UseFade(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.UseFade;
        }
        private void set_53_CascadingTextBlock_UseFade(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.UseFade = (global::System.Boolean)Value;
        }
        private object get_54_CascadingTextBlock_UseRotation(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.UseRotation;
        }
        private void set_54_CascadingTextBlock_UseRotation(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.UseRotation = (global::System.Boolean)Value;
        }
        private object get_55_CascadingTextBlock_FadeInEasingFunction(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.FadeInEasingFunction;
        }
        private void set_55_CascadingTextBlock_FadeInEasingFunction(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.FadeInEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_56_CascadingTextBlock_FadeOutEasingFunction(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            return that.FadeOutEasingFunction;
        }
        private void set_56_CascadingTextBlock_FadeOutEasingFunction(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CascadingTextBlock)instance;
            that.FadeOutEasingFunction = (global::Windows.UI.Xaml.Media.Animation.EasingFunctionBase)Value;
        }
        private object get_57_TrianglePicker_X(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TrianglePicker)instance;
            return that.X;
        }
        private void set_57_TrianglePicker_X(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.TrianglePicker)instance;
            that.X = (global::System.Double)Value;
        }
        private object get_58_TrianglePicker_Y(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TrianglePicker)instance;
            return that.Y;
        }
        private void set_58_TrianglePicker_Y(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.TrianglePicker)instance;
            that.Y = (global::System.Double)Value;
        }
        private object get_59_HueRingPicker_ThumbBorderBrush(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            return that.ThumbBorderBrush;
        }
        private void set_59_HueRingPicker_ThumbBorderBrush(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            that.ThumbBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_60_HueRingPicker_ThumbBorderThickness(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            return that.ThumbBorderThickness;
        }
        private void set_60_HueRingPicker_ThumbBorderThickness(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            that.ThumbBorderThickness = (global::System.Double)Value;
        }
        private object get_61_HueRingPicker_ThumbBackground(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            return that.ThumbBackground;
        }
        private void set_61_HueRingPicker_ThumbBackground(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            that.ThumbBackground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_62_HueRingPicker_RingThickness(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            return that.RingThickness;
        }
        private void set_62_HueRingPicker_RingThickness(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            that.RingThickness = (global::System.Double)Value;
        }
        private object get_63_HueRingPicker_ThumbArcAngle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            return that.ThumbArcAngle;
        }
        private void set_63_HueRingPicker_ThumbArcAngle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HueRingPicker)instance;
            that.ThumbArcAngle = (global::System.Double)Value;
        }
        private object get_64_CustomGridSplitter_ResizeBehavior(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            return that.ResizeBehavior;
        }
        private void set_64_CustomGridSplitter_ResizeBehavior(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            that.ResizeBehavior = (global::WinRTXamlToolkit.Controls.GridResizeBehavior)Value;
        }
        private object get_65_CustomGridSplitter_ResizeDirection(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            return that.ResizeDirection;
        }
        private void set_65_CustomGridSplitter_ResizeDirection(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            that.ResizeDirection = (global::WinRTXamlToolkit.Controls.GridResizeDirection)Value;
        }
        private object get_66_CustomGridSplitter_KeyboardIncrement(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            return that.KeyboardIncrement;
        }
        private void set_66_CustomGridSplitter_KeyboardIncrement(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            that.KeyboardIncrement = (global::System.Double)Value;
        }
        private object get_67_CustomGridSplitter_ShowsPreview(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            return that.ShowsPreview;
        }
        private void set_67_CustomGridSplitter_ShowsPreview(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            that.ShowsPreview = (global::System.Boolean)Value;
        }
        private object get_68_CustomGridSplitter_PreviewStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            return that.PreviewStyle;
        }
        private void set_68_CustomGridSplitter_PreviewStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.CustomGridSplitter)instance;
            that.PreviewStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_69_NumericUpDown_ValueFormat(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.NumericUpDown)instance;
            return that.ValueFormat;
        }
        private void set_69_NumericUpDown_ValueFormat(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.NumericUpDown)instance;
            that.ValueFormat = (global::System.String)Value;
        }
        private object get_70_NumericUpDown_ValueBarVisibility(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.NumericUpDown)instance;
            return that.ValueBarVisibility;
        }
        private void set_70_NumericUpDown_ValueBarVisibility(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.NumericUpDown)instance;
            that.ValueBarVisibility = (global::WinRTXamlToolkit.Controls.NumericUpDownValueBarVisibility)Value;
        }
        private object get_71_NumericUpDown_IsReadOnly(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.NumericUpDown)instance;
            return that.IsReadOnly;
        }
        private void set_71_NumericUpDown_IsReadOnly(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.NumericUpDown)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_72_RingSlice_StartAngle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.StartAngle;
        }
        private void set_72_RingSlice_StartAngle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.StartAngle = (global::System.Double)Value;
        }
        private object get_73_RingSlice_EndAngle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.EndAngle;
        }
        private void set_73_RingSlice_EndAngle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.EndAngle = (global::System.Double)Value;
        }
        private object get_74_RingSlice_Radius(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.Radius;
        }
        private void set_74_RingSlice_Radius(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.Radius = (global::System.Double)Value;
        }
        private object get_75_RingSlice_InnerRadius(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.InnerRadius;
        }
        private void set_75_RingSlice_InnerRadius(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.InnerRadius = (global::System.Double)Value;
        }
        private object get_76_RingSlice_Center(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            return that.Center;
        }
        private void set_76_RingSlice_Center(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.RingSlice)instance;
            that.Center = (global::System.Nullable<global::Windows.Foundation.Point>)Value;
        }
        private object get_77_DelayedLoadControl_Delay(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.DelayedLoadControl)instance;
            return that.Delay;
        }
        private void set_77_DelayedLoadControl_Delay(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.DelayedLoadControl)instance;
            that.Delay = (global::System.TimeSpan)Value;
        }
        private object get_78_DelayedLoadControl_ContentTemplate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.DelayedLoadControl)instance;
            return that.ContentTemplate;
        }
        private void set_78_DelayedLoadControl_ContentTemplate(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.DelayedLoadControl)instance;
            that.ContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_79_ImageButton_Stretch(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.Stretch;
        }
        private void set_79_ImageButton_Stretch(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_80_ImageButton_RecyclePressedStateImageForHover(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.RecyclePressedStateImageForHover;
        }
        private void set_80_ImageButton_RecyclePressedStateImageForHover(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.RecyclePressedStateImageForHover = (global::System.Boolean)Value;
        }
        private object get_81_ImageButton_NormalStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.NormalStateImageSource;
        }
        private void set_81_ImageButton_NormalStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.NormalStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_82_ImageButton_HoverStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.HoverStateImageSource;
        }
        private void set_82_ImageButton_HoverStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.HoverStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_83_ImageButton_PressedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.PressedStateImageSource;
        }
        private void set_83_ImageButton_PressedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.PressedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_84_ImageButton_DisabledStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.DisabledStateImageSource;
        }
        private void set_84_ImageButton_DisabledStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.DisabledStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_85_ImageButton_NormalStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.NormalStateImageUriSource;
        }
        private void set_85_ImageButton_NormalStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.NormalStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_86_ImageButton_HoverStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.HoverStateImageUriSource;
        }
        private void set_86_ImageButton_HoverStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.HoverStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_87_ImageButton_PressedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.PressedStateImageUriSource;
        }
        private void set_87_ImageButton_PressedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.PressedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_88_ImageButton_DisabledStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.DisabledStateImageUriSource;
        }
        private void set_88_ImageButton_DisabledStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.DisabledStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_89_ImageButton_GenerateMissingImages(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GenerateMissingImages;
        }
        private void set_89_ImageButton_GenerateMissingImages(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GenerateMissingImages = (global::System.Boolean)Value;
        }
        private object get_90_ImageButton_GeneratedHoverStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GeneratedHoverStateLightenAmount;
        }
        private void set_90_ImageButton_GeneratedHoverStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GeneratedHoverStateLightenAmount = (global::System.Double)Value;
        }
        private object get_91_ImageButton_GeneratedPressedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GeneratedPressedStateLightenAmount;
        }
        private void set_91_ImageButton_GeneratedPressedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GeneratedPressedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_92_ImageButton_GeneratedDisabledStateGrayscaleAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            return that.GeneratedDisabledStateGrayscaleAmount;
        }
        private void set_92_ImageButton_GeneratedDisabledStateGrayscaleAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageButton)instance;
            that.GeneratedDisabledStateGrayscaleAmount = (global::System.Double)Value;
        }
        private object get_93_ImageToggleButton_Stretch(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.Stretch;
        }
        private void set_93_ImageToggleButton_Stretch(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.Stretch = (global::Windows.UI.Xaml.Media.Stretch)Value;
        }
        private object get_94_ImageToggleButton_RecyclePressedStateImageForHover(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.RecyclePressedStateImageForHover;
        }
        private void set_94_ImageToggleButton_RecyclePressedStateImageForHover(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.RecyclePressedStateImageForHover = (global::System.Boolean)Value;
        }
        private object get_95_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.RecycleUncheckedStateImagesForCheckedStates;
        }
        private void set_95_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.RecycleUncheckedStateImagesForCheckedStates = (global::System.Boolean)Value;
        }
        private object get_96_ImageToggleButton_NormalStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.NormalStateImageSource;
        }
        private void set_96_ImageToggleButton_NormalStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.NormalStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_97_ImageToggleButton_HoverStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.HoverStateImageSource;
        }
        private void set_97_ImageToggleButton_HoverStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.HoverStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_98_ImageToggleButton_PressedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.PressedStateImageSource;
        }
        private void set_98_ImageToggleButton_PressedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.PressedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_99_ImageToggleButton_DisabledStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.DisabledStateImageSource;
        }
        private void set_99_ImageToggleButton_DisabledStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.DisabledStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_100_ImageToggleButton_CheckedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedStateImageSource;
        }
        private void set_100_ImageToggleButton_CheckedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_101_ImageToggleButton_CheckedHoverStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedHoverStateImageSource;
        }
        private void set_101_ImageToggleButton_CheckedHoverStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedHoverStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_102_ImageToggleButton_CheckedPressedStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedPressedStateImageSource;
        }
        private void set_102_ImageToggleButton_CheckedPressedStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedPressedStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_103_ImageToggleButton_CheckedDisabledStateImageSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedDisabledStateImageSource;
        }
        private void set_103_ImageToggleButton_CheckedDisabledStateImageSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedDisabledStateImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_104_ImageToggleButton_NormalStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.NormalStateImageUriSource;
        }
        private void set_104_ImageToggleButton_NormalStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.NormalStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_105_ImageToggleButton_HoverStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.HoverStateImageUriSource;
        }
        private void set_105_ImageToggleButton_HoverStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.HoverStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_106_ImageToggleButton_PressedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.PressedStateImageUriSource;
        }
        private void set_106_ImageToggleButton_PressedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.PressedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_107_ImageToggleButton_DisabledStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.DisabledStateImageUriSource;
        }
        private void set_107_ImageToggleButton_DisabledStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.DisabledStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_108_ImageToggleButton_CheckedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedStateImageUriSource;
        }
        private void set_108_ImageToggleButton_CheckedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_109_ImageToggleButton_CheckedHoverStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedHoverStateImageUriSource;
        }
        private void set_109_ImageToggleButton_CheckedHoverStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedHoverStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_110_ImageToggleButton_CheckedPressedStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedPressedStateImageUriSource;
        }
        private void set_110_ImageToggleButton_CheckedPressedStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedPressedStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_111_ImageToggleButton_CheckedDisabledStateImageUriSource(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.CheckedDisabledStateImageUriSource;
        }
        private void set_111_ImageToggleButton_CheckedDisabledStateImageUriSource(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.CheckedDisabledStateImageUriSource = (global::System.Uri)Value;
        }
        private object get_112_ImageToggleButton_GenerateMissingImages(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GenerateMissingImages;
        }
        private void set_112_ImageToggleButton_GenerateMissingImages(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GenerateMissingImages = (global::System.Boolean)Value;
        }
        private object get_113_ImageToggleButton_GeneratedHoverStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedHoverStateLightenAmount;
        }
        private void set_113_ImageToggleButton_GeneratedHoverStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedHoverStateLightenAmount = (global::System.Double)Value;
        }
        private object get_114_ImageToggleButton_GeneratedPressedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedPressedStateLightenAmount;
        }
        private void set_114_ImageToggleButton_GeneratedPressedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedPressedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_115_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedDisabledStateGrayscaleAmount;
        }
        private void set_115_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedDisabledStateGrayscaleAmount = (global::System.Double)Value;
        }
        private object get_116_ImageToggleButton_GeneratedCheckedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedStateLightenAmount;
        }
        private void set_116_ImageToggleButton_GeneratedCheckedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_117_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedHoverStateLightenAmount;
        }
        private void set_117_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedHoverStateLightenAmount = (global::System.Double)Value;
        }
        private object get_118_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedPressedStateLightenAmount;
        }
        private void set_118_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedPressedStateLightenAmount = (global::System.Double)Value;
        }
        private object get_119_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            return that.GeneratedCheckedDisabledStateGrayscaleAmount;
        }
        private void set_119_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ImageToggleButton)instance;
            that.GeneratedCheckedDisabledStateGrayscaleAmount = (global::System.Double)Value;
        }
        private object get_120_InputDialog_BackgroundScreenBrush(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.BackgroundScreenBrush;
        }
        private void set_120_InputDialog_BackgroundScreenBrush(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.BackgroundScreenBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_121_InputDialog_BackgroundStripeBrush(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.BackgroundStripeBrush;
        }
        private void set_121_InputDialog_BackgroundStripeBrush(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.BackgroundStripeBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_122_InputDialog_TitleStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.TitleStyle;
        }
        private void set_122_InputDialog_TitleStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.TitleStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_123_InputDialog_TextStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.TextStyle;
        }
        private void set_123_InputDialog_TextStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.TextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_124_InputDialog_InputTextStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.InputTextStyle;
        }
        private void set_124_InputDialog_InputTextStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.InputTextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_125_InputDialog_ButtonStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.ButtonStyle;
        }
        private void set_125_InputDialog_ButtonStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.ButtonStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_126_InputDialog_InputText(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.InputText;
        }
        private void set_126_InputDialog_InputText(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.InputText = (global::System.String)Value;
        }
        private object get_127_InputDialog_AcceptButton(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.AcceptButton;
        }
        private void set_127_InputDialog_AcceptButton(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.AcceptButton = (global::System.String)Value;
        }
        private object get_128_InputDialog_CancelButton(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.CancelButton;
        }
        private void set_128_InputDialog_CancelButton(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.CancelButton = (global::System.String)Value;
        }
        private object get_129_InputDialog_IsLightDismissEnabled(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_129_InputDialog_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_130_InputDialog_AwaitsCloseTransition(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.AwaitsCloseTransition;
        }
        private void set_130_InputDialog_AwaitsCloseTransition(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.AwaitsCloseTransition = (global::System.Boolean)Value;
        }
        private object get_131_InputDialog_ButtonsPanelOrientation(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            return that.ButtonsPanelOrientation;
        }
        private void set_131_InputDialog_ButtonsPanelOrientation(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.InputDialog)instance;
            that.ButtonsPanelOrientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_132_TreeViewItem_HasItems(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeViewItem)instance;
            return that.HasItems;
        }
        private object get_133_TreeViewItem_IsExpanded(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeViewItem)instance;
            return that.IsExpanded;
        }
        private void set_133_TreeViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_134_TreeViewItem_IsSelected(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeViewItem)instance;
            return that.IsSelected;
        }
        private void set_134_TreeViewItem_IsSelected(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeViewItem)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_135_TreeViewItem_IsSelectionActive(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeViewItem)instance;
            return that.IsSelectionActive;
        }
        private object get_136_HeaderedItemsControl_Header(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            return that.Header;
        }
        private void set_136_HeaderedItemsControl_Header(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_137_HeaderedItemsControl_HeaderTemplate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            return that.HeaderTemplate;
        }
        private void set_137_HeaderedItemsControl_HeaderTemplate(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_138_HeaderedItemsControl_ItemContainerStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            return that.ItemContainerStyle;
        }
        private void set_138_HeaderedItemsControl_ItemContainerStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.HeaderedItemsControl)instance;
            that.ItemContainerStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_139_TreeView_SelectedItem(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeView)instance;
            return that.SelectedItem;
        }
        private object get_140_TreeView_SelectedValue(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeView)instance;
            return that.SelectedValue;
        }
        private object get_141_TreeView_SelectedValuePath(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeView)instance;
            return that.SelectedValuePath;
        }
        private void set_141_TreeView_SelectedValuePath(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.TreeView)instance;
            that.SelectedValuePath = (global::System.String)Value;
        }
        private object get_142_WatermarkTextBox_WatermarkTextStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.WatermarkTextStyle;
        }
        private void set_142_WatermarkTextBox_WatermarkTextStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.WatermarkTextStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_143_WatermarkTextBox_Watermark(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.Watermark;
        }
        private void set_143_WatermarkTextBox_Watermark(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.Watermark = (global::System.Object)Value;
        }
        private object get_144_WatermarkTextBox_WatermarkText(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            return that.WatermarkText;
        }
        private void set_144_WatermarkTextBox_WatermarkText(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WatermarkTextBox)instance;
            that.WatermarkText = (global::System.String)Value;
        }
        private object get_145_WebBrowser_AutoNavigate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WebBrowser)instance;
            return that.AutoNavigate;
        }
        private void set_145_WebBrowser_AutoNavigate(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WebBrowser)instance;
            that.AutoNavigate = (global::System.Boolean)Value;
        }
        private object get_146_WebBrowser_Source(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WebBrowser)instance;
            return that.Source;
        }
        private void set_146_WebBrowser_Source(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WebBrowser)instance;
            that.Source = (global::System.Uri)Value;
        }
        private object get_147_WebBrowser_Title(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WebBrowser)instance;
            return that.Title;
        }
        private void set_147_WebBrowser_Title(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WebBrowser)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_148_FrameworkElementExtensions_ClipToBounds(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_148_FrameworkElementExtensions_ClipToBounds(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetClipToBounds((global::Windows.UI.Xaml.DependencyObject)instance, (System.Boolean)Value);
                    }
        private object get_149_FrameworkElementExtensions_ClipToBoundsHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_149_FrameworkElementExtensions_ClipToBoundsHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetClipToBoundsHandler((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler)Value);
                    }
        private object get_150_FrameworkElementExtensions_Cursor(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_150_FrameworkElementExtensions_Cursor(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetCursor((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Core.CoreCursor)Value);
                    }
        private object get_151_FrameworkElementExtensions_SystemCursor(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_151_FrameworkElementExtensions_SystemCursor(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetSystemCursor((global::Windows.UI.Xaml.DependencyObject)instance, (Windows.UI.Core.CoreCursorType)Value);
                    }
        private object get_152_FrameworkElementExtensions_CursorDisplayHandler(object instance)
        {
            return global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.GetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_152_FrameworkElementExtensions_CursorDisplayHandler(object instance, object Value)
        {
            global::WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SetCursorDisplayHandler((global::Windows.UI.Xaml.DependencyObject)instance, (WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler)Value);
                    }
        private object get_153_ListItemButton_Command(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ListItemButton)instance;
            return that.Command;
        }
        private void set_153_ListItemButton_Command(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ListItemButton)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_154_ListItemButton_CommandParameter(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.ListItemButton)instance;
            return that.CommandParameter;
        }
        private void set_154_ListItemButton_CommandParameter(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.ListItemButton)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_155_NullableBoolToVisibilityConverter_TrueIsVisible(object instance)
        {
            var that = (global::WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter)instance;
            return that.TrueIsVisible;
        }
        private void set_155_NullableBoolToVisibilityConverter_TrueIsVisible(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter)instance;
            that.TrueIsVisible = (global::System.Boolean)Value;
        }
        private object get_156_NullableBoolToVisibilityConverter_IsReversed(object instance)
        {
            var that = (global::WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter)instance;
            return that.IsReversed;
        }
        private void set_156_NullableBoolToVisibilityConverter_IsReversed(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter)instance;
            that.IsReversed = (global::System.Boolean)Value;
        }
        private object get_157_NullableBoolToBoolConverter_IsReversed(object instance)
        {
            var that = (global::WinRTXamlToolkit.Converters.NullableBoolToBoolConverter)instance;
            return that.IsReversed;
        }
        private void set_157_NullableBoolToBoolConverter_IsReversed(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Converters.NullableBoolToBoolConverter)instance;
            that.IsReversed = (global::System.Boolean)Value;
        }
        private object get_158_AlternativeFrame_PagePresenterStyle(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.PagePresenterStyle;
        }
        private void set_158_AlternativeFrame_PagePresenterStyle(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            that.PagePresenterStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_159_AlternativeFrame_BackStack(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.BackStack;
        }
        private object get_160_AlternativeFrame_CurrentJournalEntry(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.CurrentJournalEntry;
        }
        private object get_161_AlternativeFrame_ForwardStack(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.ForwardStack;
        }
        private object get_162_AlternativeFrame_CurrentSourcePageType(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.CurrentSourcePageType;
        }
        private object get_163_AlternativeFrame_CacheSize(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.CacheSize;
        }
        private void set_163_AlternativeFrame_CacheSize(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            that.CacheSize = (global::System.Int32)Value;
        }
        private object get_164_AlternativeFrame_PageTransition(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.PageTransition;
        }
        private void set_164_AlternativeFrame_PageTransition(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            that.PageTransition = (global::WinRTXamlToolkit.Controls.PageTransition)Value;
        }
        private object get_165_AlternativeFrame_CanGoBack(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.CanGoBack;
        }
        private object get_166_AlternativeFrame_CanGoForward(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.CanGoForward;
        }
        private object get_167_AlternativeFrame_CanNavigate(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.CanNavigate;
        }
        private object get_168_AlternativeFrame_ShouldWaitForImagesToLoad(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.ShouldWaitForImagesToLoad;
        }
        private void set_168_AlternativeFrame_ShouldWaitForImagesToLoad(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            that.ShouldWaitForImagesToLoad = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_169_AlternativeFrame_BackStackDepth(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.BackStackDepth;
        }
        private object get_170_AlternativeFrame_ForwardStackDepth(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AlternativeFrame)instance;
            return that.ForwardStackDepth;
        }
        private object get_171_AnimatingContainer_RotatingContent(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            return that.RotatingContent;
        }
        private void set_171_AnimatingContainer_RotatingContent(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            that.RotatingContent = (global::System.Object)Value;
        }
        private object get_172_AnimatingContainer_RadiusX(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            return that.RadiusX;
        }
        private void set_172_AnimatingContainer_RadiusX(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            that.RadiusX = (global::System.Double)Value;
        }
        private object get_173_AnimatingContainer_RadiusY(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            return that.RadiusY;
        }
        private void set_173_AnimatingContainer_RadiusY(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            that.RadiusY = (global::System.Double)Value;
        }
        private object get_174_AnimatingContainer_Duration(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            return that.Duration;
        }
        private void set_174_AnimatingContainer_Duration(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            that.Duration = (global::System.String)Value;
        }
        private object get_175_AnimatingContainer_PulseScale(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            return that.PulseScale;
        }
        private void set_175_AnimatingContainer_PulseScale(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            that.PulseScale = (global::System.Double)Value;
        }
        private object get_176_AnimatingContainer_AutoPlay(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            return that.AutoPlay;
        }
        private void set_176_AnimatingContainer_AutoPlay(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            that.AutoPlay = (global::System.Boolean)Value;
        }
        private object get_177_AnimatingContainer_IsAnimating(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            return that.IsAnimating;
        }
        private void set_177_AnimatingContainer_IsAnimating(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.AnimatingContainer)instance;
            that.IsAnimating = (global::System.Boolean)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember xamlMember = null;
            global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.ShowOnLoad":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ShowOnLoad", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_CameraCaptureControl_ShowOnLoad;
                xamlMember.Setter = set_0_CameraCaptureControl_ShowOnLoad;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.PreferredCameraType":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PreferredCameraType", "Windows.Devices.Enumeration.Panel");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_CameraCaptureControl_PreferredCameraType;
                xamlMember.Setter = set_1_CameraCaptureControl_PreferredCameraType;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.VideoDevice":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "VideoDevice", "Windows.Devices.Enumeration.DeviceInformation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_CameraCaptureControl_VideoDevice;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.AudioDevice":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AudioDevice", "Windows.Devices.Enumeration.DeviceInformation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_CameraCaptureControl_AudioDevice;
                xamlMember.Setter = set_3_CameraCaptureControl_AudioDevice;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.VideoDeviceId":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "VideoDeviceId", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_CameraCaptureControl_VideoDeviceId;
                xamlMember.Setter = set_4_CameraCaptureControl_VideoDeviceId;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.AudioDeviceId":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AudioDeviceId", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_CameraCaptureControl_AudioDeviceId;
                xamlMember.Setter = set_5_CameraCaptureControl_AudioDeviceId;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.VideoDeviceName":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "VideoDeviceName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_CameraCaptureControl_VideoDeviceName;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.AudioDeviceName":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AudioDeviceName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_CameraCaptureControl_AudioDeviceName;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.PickVideoDeviceAutomatically":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PickVideoDeviceAutomatically", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_CameraCaptureControl_PickVideoDeviceAutomatically;
                xamlMember.Setter = set_8_CameraCaptureControl_PickVideoDeviceAutomatically;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.PickAudioDeviceAutomatically":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PickAudioDeviceAutomatically", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_CameraCaptureControl_PickAudioDeviceAutomatically;
                xamlMember.Setter = set_9_CameraCaptureControl_PickAudioDeviceAutomatically;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.StreamingCaptureMode":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "StreamingCaptureMode", "Windows.Media.Capture.StreamingCaptureMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_CameraCaptureControl_StreamingCaptureMode;
                xamlMember.Setter = set_10_CameraCaptureControl_StreamingCaptureMode;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.VideoEncodingQuality":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "VideoEncodingQuality", "Windows.Media.MediaProperties.VideoEncodingQuality");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_CameraCaptureControl_VideoEncodingQuality;
                xamlMember.Setter = set_11_CameraCaptureControl_VideoEncodingQuality;
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.VideoDeviceEnclosureLocation":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "VideoDeviceEnclosureLocation", "Windows.Devices.Enumeration.EnclosureLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_CameraCaptureControl_VideoDeviceEnclosureLocation;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.CameraCaptureControl.PhotoCaptureCountdownSeconds":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CameraCaptureControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PhotoCaptureCountdownSeconds", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_CameraCaptureControl_PhotoCaptureCountdownSeconds;
                xamlMember.Setter = set_13_CameraCaptureControl_PhotoCaptureCountdownSeconds;
                break;
            case "WinRTXamlToolkit.Converters.BooleanToVisibilityConverter.IsReversed":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Converters.BooleanToVisibilityConverter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsReversed", "Boolean");
                xamlMember.Getter = get_14_BooleanToVisibilityConverter_IsReversed;
                xamlMember.Setter = set_14_BooleanToVisibilityConverter_IsReversed;
                break;
            case "WinRTXamlToolkit.Converters.BooleanToVisibilityConverter.IsInversed":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Converters.BooleanToVisibilityConverter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsInversed", "Boolean");
                xamlMember.Getter = get_15_BooleanToVisibilityConverter_IsInversed;
                xamlMember.Setter = set_15_BooleanToVisibilityConverter_IsInversed;
                break;
            case "WinRTXamlToolkit.Controls.LayoutTransformControl.Child":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.LayoutTransformControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Child", "Windows.UI.Xaml.FrameworkElement");
                xamlMember.Getter = get_16_LayoutTransformControl_Child;
                xamlMember.Setter = set_16_LayoutTransformControl_Child;
                break;
            case "WinRTXamlToolkit.Controls.LayoutTransformControl.Transform":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.LayoutTransformControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Transform", "Windows.UI.Xaml.Media.Transform");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_LayoutTransformControl_Transform;
                xamlMember.Setter = set_17_LayoutTransformControl_Transform;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.IsOpen":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_CustomAppBar_IsOpen;
                xamlMember.Setter = set_18_CustomAppBar_IsOpen;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.CanDismiss":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CanDismiss", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_CustomAppBar_CanDismiss;
                xamlMember.Setter = set_19_CustomAppBar_CanDismiss;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.CanOpen":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CanOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_CustomAppBar_CanOpen;
                xamlMember.Setter = set_20_CustomAppBar_CanOpen;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.CanOpenInSnappedView":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CanOpenInSnappedView", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_CustomAppBar_CanOpenInSnappedView;
                xamlMember.Setter = set_21_CustomAppBar_CanOpenInSnappedView;
                break;
            case "WinRTXamlToolkit.Controls.CustomAppBar.IsLightDismissEnabled":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomAppBar");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_CustomAppBar_IsLightDismissEnabled;
                xamlMember.Setter = set_22_CustomAppBar_IsLightDismissEnabled;
                break;
            case "WinRTXamlToolkit.Controls.CountdownControl.Seconds":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CountdownControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Seconds", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_CountdownControl_Seconds;
                xamlMember.Setter = set_23_CountdownControl_Seconds;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.Columns":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Columns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_CascadingImageControl_Columns;
                xamlMember.Setter = set_24_CascadingImageControl_Columns;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.Rows":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Rows", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_CascadingImageControl_Rows;
                xamlMember.Setter = set_25_CascadingImageControl_Rows;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.ImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_CascadingImageControl_ImageSource;
                xamlMember.Setter = set_26_CascadingImageControl_ImageSource;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.ColumnDelay":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ColumnDelay", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_CascadingImageControl_ColumnDelay;
                xamlMember.Setter = set_27_CascadingImageControl_ColumnDelay;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.RowDelay":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RowDelay", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_CascadingImageControl_RowDelay;
                xamlMember.Setter = set_28_CascadingImageControl_RowDelay;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.TileDuration":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "TileDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_CascadingImageControl_TileDuration;
                xamlMember.Setter = set_29_CascadingImageControl_TileDuration;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.CascadeDirection":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeDirection", "WinRTXamlToolkit.Controls.CascadeDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_CascadingImageControl_CascadeDirection;
                xamlMember.Setter = set_30_CascadingImageControl_CascadeDirection;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.CascadeInEasingFunction":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeInEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_CascadingImageControl_CascadeInEasingFunction;
                xamlMember.Setter = set_31_CascadingImageControl_CascadeInEasingFunction;
                break;
            case "WinRTXamlToolkit.Controls.CascadingImageControl.CascadeSequence":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingImageControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeSequence", "WinRTXamlToolkit.Controls.CascadeSequence");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_CascadingImageControl_CascadeSequence;
                xamlMember.Setter = set_32_CascadingImageControl_CascadeSequence;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.AnimateOnLoaded":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AnimateOnLoaded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_CascadingTextBlock_AnimateOnLoaded;
                xamlMember.Setter = set_33_CascadingTextBlock_AnimateOnLoaded;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.Text":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_CascadingTextBlock_Text;
                xamlMember.Setter = set_34_CascadingTextBlock_Text;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.TextBlockTemplate":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "TextBlockTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_CascadingTextBlock_TextBlockTemplate;
                xamlMember.Setter = set_35_CascadingTextBlock_TextBlockTemplate;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.StartDelay":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "StartDelay", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_CascadingTextBlock_StartDelay;
                xamlMember.Setter = set_36_CascadingTextBlock_StartDelay;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeIn":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeIn", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_CascadingTextBlock_CascadeIn;
                xamlMember.Setter = set_37_CascadingTextBlock_CascadeIn;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeOut":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeOut", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_CascadingTextBlock_CascadeOut;
                xamlMember.Setter = set_38_CascadingTextBlock_CascadeOut;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.HoldDuration":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HoldDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_CascadingTextBlock_HoldDuration;
                xamlMember.Setter = set_39_CascadingTextBlock_HoldDuration;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.HoldDurationString":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HoldDurationString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_CascadingTextBlock_HoldDurationString;
                xamlMember.Setter = set_40_CascadingTextBlock_HoldDurationString;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeInDuration":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeInDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_CascadingTextBlock_CascadeInDuration;
                xamlMember.Setter = set_41_CascadingTextBlock_CascadeInDuration;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeInDurationString":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeInDurationString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_CascadingTextBlock_CascadeInDurationString;
                xamlMember.Setter = set_42_CascadingTextBlock_CascadeInDurationString;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeOutDuration":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeOutDuration", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_CascadingTextBlock_CascadeOutDuration;
                xamlMember.Setter = set_43_CascadingTextBlock_CascadeOutDuration;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeOutDurationString":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeOutDurationString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_CascadingTextBlock_CascadeOutDurationString;
                xamlMember.Setter = set_44_CascadingTextBlock_CascadeOutDurationString;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeInterval":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeInterval", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_CascadingTextBlock_CascadeInterval;
                xamlMember.Setter = set_45_CascadingTextBlock_CascadeInterval;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeIntervalString":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeIntervalString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_CascadingTextBlock_CascadeIntervalString;
                xamlMember.Setter = set_46_CascadingTextBlock_CascadeIntervalString;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeInEasingFunction":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeInEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_CascadingTextBlock_CascadeInEasingFunction;
                xamlMember.Setter = set_47_CascadingTextBlock_CascadeInEasingFunction;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.CascadeOutEasingFunction":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CascadeOutEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_CascadingTextBlock_CascadeOutEasingFunction;
                xamlMember.Setter = set_48_CascadingTextBlock_CascadeOutEasingFunction;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.FromVerticalOffset":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "FromVerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_CascadingTextBlock_FromVerticalOffset;
                xamlMember.Setter = set_49_CascadingTextBlock_FromVerticalOffset;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.ToVerticalOffset":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ToVerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_CascadingTextBlock_ToVerticalOffset;
                xamlMember.Setter = set_50_CascadingTextBlock_ToVerticalOffset;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.FromRotation":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "FromRotation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_CascadingTextBlock_FromRotation;
                xamlMember.Setter = set_51_CascadingTextBlock_FromRotation;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.ToRotation":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ToRotation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_CascadingTextBlock_ToRotation;
                xamlMember.Setter = set_52_CascadingTextBlock_ToRotation;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.UseFade":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "UseFade", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_CascadingTextBlock_UseFade;
                xamlMember.Setter = set_53_CascadingTextBlock_UseFade;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.UseRotation":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "UseRotation", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_CascadingTextBlock_UseRotation;
                xamlMember.Setter = set_54_CascadingTextBlock_UseRotation;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.FadeInEasingFunction":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "FadeInEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_CascadingTextBlock_FadeInEasingFunction;
                xamlMember.Setter = set_55_CascadingTextBlock_FadeInEasingFunction;
                break;
            case "WinRTXamlToolkit.Controls.CascadingTextBlock.FadeOutEasingFunction":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CascadingTextBlock");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "FadeOutEasingFunction", "Windows.UI.Xaml.Media.Animation.EasingFunctionBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_CascadingTextBlock_FadeOutEasingFunction;
                xamlMember.Setter = set_56_CascadingTextBlock_FadeOutEasingFunction;
                break;
            case "WinRTXamlToolkit.Controls.TrianglePicker.X":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TrianglePicker");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "X", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_TrianglePicker_X;
                xamlMember.Setter = set_57_TrianglePicker_X;
                break;
            case "WinRTXamlToolkit.Controls.TrianglePicker.Y":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TrianglePicker");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Y", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_TrianglePicker_Y;
                xamlMember.Setter = set_58_TrianglePicker_Y;
                break;
            case "WinRTXamlToolkit.Controls.HueRingPicker.ThumbBorderBrush":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HueRingPicker");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ThumbBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_HueRingPicker_ThumbBorderBrush;
                xamlMember.Setter = set_59_HueRingPicker_ThumbBorderBrush;
                break;
            case "WinRTXamlToolkit.Controls.HueRingPicker.ThumbBorderThickness":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HueRingPicker");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ThumbBorderThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_HueRingPicker_ThumbBorderThickness;
                xamlMember.Setter = set_60_HueRingPicker_ThumbBorderThickness;
                break;
            case "WinRTXamlToolkit.Controls.HueRingPicker.ThumbBackground":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HueRingPicker");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ThumbBackground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_HueRingPicker_ThumbBackground;
                xamlMember.Setter = set_61_HueRingPicker_ThumbBackground;
                break;
            case "WinRTXamlToolkit.Controls.HueRingPicker.RingThickness":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HueRingPicker");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RingThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_HueRingPicker_RingThickness;
                xamlMember.Setter = set_62_HueRingPicker_RingThickness;
                break;
            case "WinRTXamlToolkit.Controls.HueRingPicker.ThumbArcAngle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HueRingPicker");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ThumbArcAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_HueRingPicker_ThumbArcAngle;
                xamlMember.Setter = set_63_HueRingPicker_ThumbArcAngle;
                break;
            case "WinRTXamlToolkit.Controls.CustomGridSplitter.ResizeBehavior":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomGridSplitter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ResizeBehavior", "WinRTXamlToolkit.Controls.GridResizeBehavior");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_CustomGridSplitter_ResizeBehavior;
                xamlMember.Setter = set_64_CustomGridSplitter_ResizeBehavior;
                break;
            case "WinRTXamlToolkit.Controls.CustomGridSplitter.ResizeDirection":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomGridSplitter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ResizeDirection", "WinRTXamlToolkit.Controls.GridResizeDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_65_CustomGridSplitter_ResizeDirection;
                xamlMember.Setter = set_65_CustomGridSplitter_ResizeDirection;
                break;
            case "WinRTXamlToolkit.Controls.CustomGridSplitter.KeyboardIncrement":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomGridSplitter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "KeyboardIncrement", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_CustomGridSplitter_KeyboardIncrement;
                xamlMember.Setter = set_66_CustomGridSplitter_KeyboardIncrement;
                break;
            case "WinRTXamlToolkit.Controls.CustomGridSplitter.ShowsPreview":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomGridSplitter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ShowsPreview", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_CustomGridSplitter_ShowsPreview;
                xamlMember.Setter = set_67_CustomGridSplitter_ShowsPreview;
                break;
            case "WinRTXamlToolkit.Controls.CustomGridSplitter.PreviewStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.CustomGridSplitter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PreviewStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_CustomGridSplitter_PreviewStyle;
                xamlMember.Setter = set_68_CustomGridSplitter_PreviewStyle;
                break;
            case "WinRTXamlToolkit.Controls.NumericUpDown.ValueFormat":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.NumericUpDown");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ValueFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_NumericUpDown_ValueFormat;
                xamlMember.Setter = set_69_NumericUpDown_ValueFormat;
                break;
            case "WinRTXamlToolkit.Controls.NumericUpDown.ValueBarVisibility":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.NumericUpDown");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ValueBarVisibility", "WinRTXamlToolkit.Controls.NumericUpDownValueBarVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_NumericUpDown_ValueBarVisibility;
                xamlMember.Setter = set_70_NumericUpDown_ValueBarVisibility;
                break;
            case "WinRTXamlToolkit.Controls.NumericUpDown.IsReadOnly":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.NumericUpDown");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_NumericUpDown_IsReadOnly;
                xamlMember.Setter = set_71_NumericUpDown_IsReadOnly;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.StartAngle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "StartAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_RingSlice_StartAngle;
                xamlMember.Setter = set_72_RingSlice_StartAngle;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.EndAngle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "EndAngle", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_RingSlice_EndAngle;
                xamlMember.Setter = set_73_RingSlice_EndAngle;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.Radius":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Radius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_RingSlice_Radius;
                xamlMember.Setter = set_74_RingSlice_Radius;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.InnerRadius":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "InnerRadius", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_RingSlice_InnerRadius;
                xamlMember.Setter = set_75_RingSlice_InnerRadius;
                break;
            case "WinRTXamlToolkit.Controls.RingSlice.Center":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.RingSlice");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Center", "System.Nullable<Windows.Foundation.Point>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_RingSlice_Center;
                xamlMember.Setter = set_76_RingSlice_Center;
                break;
            case "WinRTXamlToolkit.Controls.DelayedLoadControl.Delay":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.DelayedLoadControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Delay", "TimeSpan");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_DelayedLoadControl_Delay;
                xamlMember.Setter = set_77_DelayedLoadControl_Delay;
                break;
            case "WinRTXamlToolkit.Controls.DelayedLoadControl.ContentTemplate":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.DelayedLoadControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_DelayedLoadControl_ContentTemplate;
                xamlMember.Setter = set_78_DelayedLoadControl_ContentTemplate;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.Stretch":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_ImageButton_Stretch;
                xamlMember.Setter = set_79_ImageButton_Stretch;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.RecyclePressedStateImageForHover":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RecyclePressedStateImageForHover", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_ImageButton_RecyclePressedStateImageForHover;
                xamlMember.Setter = set_80_ImageButton_RecyclePressedStateImageForHover;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.NormalStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "NormalStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_ImageButton_NormalStateImageSource;
                xamlMember.Setter = set_81_ImageButton_NormalStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.HoverStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HoverStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_ImageButton_HoverStateImageSource;
                xamlMember.Setter = set_82_ImageButton_HoverStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.PressedStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PressedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_ImageButton_PressedStateImageSource;
                xamlMember.Setter = set_83_ImageButton_PressedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.DisabledStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "DisabledStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_ImageButton_DisabledStateImageSource;
                xamlMember.Setter = set_84_ImageButton_DisabledStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.NormalStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "NormalStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_ImageButton_NormalStateImageUriSource;
                xamlMember.Setter = set_85_ImageButton_NormalStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.HoverStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HoverStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_ImageButton_HoverStateImageUriSource;
                xamlMember.Setter = set_86_ImageButton_HoverStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.PressedStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PressedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_ImageButton_PressedStateImageUriSource;
                xamlMember.Setter = set_87_ImageButton_PressedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.DisabledStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "DisabledStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_ImageButton_DisabledStateImageUriSource;
                xamlMember.Setter = set_88_ImageButton_DisabledStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GenerateMissingImages":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GenerateMissingImages", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_ImageButton_GenerateMissingImages;
                xamlMember.Setter = set_89_ImageButton_GenerateMissingImages;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GeneratedHoverStateLightenAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedHoverStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_ImageButton_GeneratedHoverStateLightenAmount;
                xamlMember.Setter = set_90_ImageButton_GeneratedHoverStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GeneratedPressedStateLightenAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedPressedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_ImageButton_GeneratedPressedStateLightenAmount;
                xamlMember.Setter = set_91_ImageButton_GeneratedPressedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageButton.GeneratedDisabledStateGrayscaleAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedDisabledStateGrayscaleAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_ImageButton_GeneratedDisabledStateGrayscaleAmount;
                xamlMember.Setter = set_92_ImageButton_GeneratedDisabledStateGrayscaleAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.Stretch":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Stretch", "Windows.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_ImageToggleButton_Stretch;
                xamlMember.Setter = set_93_ImageToggleButton_Stretch;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.RecyclePressedStateImageForHover":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RecyclePressedStateImageForHover", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_ImageToggleButton_RecyclePressedStateImageForHover;
                xamlMember.Setter = set_94_ImageToggleButton_RecyclePressedStateImageForHover;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.RecycleUncheckedStateImagesForCheckedStates":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RecycleUncheckedStateImagesForCheckedStates", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates;
                xamlMember.Setter = set_95_ImageToggleButton_RecycleUncheckedStateImagesForCheckedStates;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.NormalStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "NormalStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_ImageToggleButton_NormalStateImageSource;
                xamlMember.Setter = set_96_ImageToggleButton_NormalStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.HoverStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HoverStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_ImageToggleButton_HoverStateImageSource;
                xamlMember.Setter = set_97_ImageToggleButton_HoverStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.PressedStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PressedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_ImageToggleButton_PressedStateImageSource;
                xamlMember.Setter = set_98_ImageToggleButton_PressedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.DisabledStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "DisabledStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_ImageToggleButton_DisabledStateImageSource;
                xamlMember.Setter = set_99_ImageToggleButton_DisabledStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_ImageToggleButton_CheckedStateImageSource;
                xamlMember.Setter = set_100_ImageToggleButton_CheckedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedHoverStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedHoverStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_ImageToggleButton_CheckedHoverStateImageSource;
                xamlMember.Setter = set_101_ImageToggleButton_CheckedHoverStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedPressedStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedPressedStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_ImageToggleButton_CheckedPressedStateImageSource;
                xamlMember.Setter = set_102_ImageToggleButton_CheckedPressedStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedDisabledStateImageSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedDisabledStateImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_ImageToggleButton_CheckedDisabledStateImageSource;
                xamlMember.Setter = set_103_ImageToggleButton_CheckedDisabledStateImageSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.NormalStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "NormalStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_ImageToggleButton_NormalStateImageUriSource;
                xamlMember.Setter = set_104_ImageToggleButton_NormalStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.HoverStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HoverStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_ImageToggleButton_HoverStateImageUriSource;
                xamlMember.Setter = set_105_ImageToggleButton_HoverStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.PressedStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PressedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_ImageToggleButton_PressedStateImageUriSource;
                xamlMember.Setter = set_106_ImageToggleButton_PressedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.DisabledStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "DisabledStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_ImageToggleButton_DisabledStateImageUriSource;
                xamlMember.Setter = set_107_ImageToggleButton_DisabledStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_ImageToggleButton_CheckedStateImageUriSource;
                xamlMember.Setter = set_108_ImageToggleButton_CheckedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedHoverStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedHoverStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_ImageToggleButton_CheckedHoverStateImageUriSource;
                xamlMember.Setter = set_109_ImageToggleButton_CheckedHoverStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedPressedStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedPressedStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_ImageToggleButton_CheckedPressedStateImageUriSource;
                xamlMember.Setter = set_110_ImageToggleButton_CheckedPressedStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.CheckedDisabledStateImageUriSource":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CheckedDisabledStateImageUriSource", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_ImageToggleButton_CheckedDisabledStateImageUriSource;
                xamlMember.Setter = set_111_ImageToggleButton_CheckedDisabledStateImageUriSource;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GenerateMissingImages":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GenerateMissingImages", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_ImageToggleButton_GenerateMissingImages;
                xamlMember.Setter = set_112_ImageToggleButton_GenerateMissingImages;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedHoverStateLightenAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedHoverStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_ImageToggleButton_GeneratedHoverStateLightenAmount;
                xamlMember.Setter = set_113_ImageToggleButton_GeneratedHoverStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedPressedStateLightenAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedPressedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_ImageToggleButton_GeneratedPressedStateLightenAmount;
                xamlMember.Setter = set_114_ImageToggleButton_GeneratedPressedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedDisabledStateGrayscaleAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedDisabledStateGrayscaleAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount;
                xamlMember.Setter = set_115_ImageToggleButton_GeneratedDisabledStateGrayscaleAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedStateLightenAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedCheckedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_ImageToggleButton_GeneratedCheckedStateLightenAmount;
                xamlMember.Setter = set_116_ImageToggleButton_GeneratedCheckedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedHoverStateLightenAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedCheckedHoverStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount;
                xamlMember.Setter = set_117_ImageToggleButton_GeneratedCheckedHoverStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedPressedStateLightenAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedCheckedPressedStateLightenAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount;
                xamlMember.Setter = set_118_ImageToggleButton_GeneratedCheckedPressedStateLightenAmount;
                break;
            case "WinRTXamlToolkit.Controls.ImageToggleButton.GeneratedCheckedDisabledStateGrayscaleAmount":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ImageToggleButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "GeneratedCheckedDisabledStateGrayscaleAmount", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount;
                xamlMember.Setter = set_119_ImageToggleButton_GeneratedCheckedDisabledStateGrayscaleAmount;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.BackgroundScreenBrush":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "BackgroundScreenBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_InputDialog_BackgroundScreenBrush;
                xamlMember.Setter = set_120_InputDialog_BackgroundScreenBrush;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.BackgroundStripeBrush":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "BackgroundStripeBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_InputDialog_BackgroundStripeBrush;
                xamlMember.Setter = set_121_InputDialog_BackgroundStripeBrush;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.TitleStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "TitleStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_InputDialog_TitleStyle;
                xamlMember.Setter = set_122_InputDialog_TitleStyle;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.TextStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "TextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_InputDialog_TextStyle;
                xamlMember.Setter = set_123_InputDialog_TextStyle;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.InputTextStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "InputTextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_InputDialog_InputTextStyle;
                xamlMember.Setter = set_124_InputDialog_InputTextStyle;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.ButtonStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ButtonStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_InputDialog_ButtonStyle;
                xamlMember.Setter = set_125_InputDialog_ButtonStyle;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.InputText":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "InputText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_InputDialog_InputText;
                xamlMember.Setter = set_126_InputDialog_InputText;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.AcceptButton":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AcceptButton", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_InputDialog_AcceptButton;
                xamlMember.Setter = set_127_InputDialog_AcceptButton;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.CancelButton":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CancelButton", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_InputDialog_CancelButton;
                xamlMember.Setter = set_128_InputDialog_CancelButton;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.IsLightDismissEnabled":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_InputDialog_IsLightDismissEnabled;
                xamlMember.Setter = set_129_InputDialog_IsLightDismissEnabled;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.AwaitsCloseTransition":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AwaitsCloseTransition", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_InputDialog_AwaitsCloseTransition;
                xamlMember.Setter = set_130_InputDialog_AwaitsCloseTransition;
                break;
            case "WinRTXamlToolkit.Controls.InputDialog.ButtonsPanelOrientation":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.InputDialog");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ButtonsPanelOrientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_InputDialog_ButtonsPanelOrientation;
                xamlMember.Setter = set_131_InputDialog_ButtonsPanelOrientation;
                break;
            case "WinRTXamlToolkit.Controls.TreeViewItem.HasItems":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TreeViewItem");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HasItems", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_TreeViewItem_HasItems;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.TreeViewItem.IsExpanded":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TreeViewItem");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_TreeViewItem_IsExpanded;
                xamlMember.Setter = set_133_TreeViewItem_IsExpanded;
                break;
            case "WinRTXamlToolkit.Controls.TreeViewItem.IsSelected":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TreeViewItem");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_TreeViewItem_IsSelected;
                xamlMember.Setter = set_134_TreeViewItem_IsSelected;
                break;
            case "WinRTXamlToolkit.Controls.TreeViewItem.IsSelectionActive":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TreeViewItem");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsSelectionActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_TreeViewItem_IsSelectionActive;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.HeaderedItemsControl.Header":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_HeaderedItemsControl_Header;
                xamlMember.Setter = set_136_HeaderedItemsControl_Header;
                break;
            case "WinRTXamlToolkit.Controls.HeaderedItemsControl.HeaderTemplate":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_HeaderedItemsControl_HeaderTemplate;
                xamlMember.Setter = set_137_HeaderedItemsControl_HeaderTemplate;
                break;
            case "WinRTXamlToolkit.Controls.HeaderedItemsControl.ItemContainerStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.HeaderedItemsControl");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ItemContainerStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_HeaderedItemsControl_ItemContainerStyle;
                xamlMember.Setter = set_138_HeaderedItemsControl_ItemContainerStyle;
                break;
            case "WinRTXamlToolkit.Controls.TreeView.SelectedItem":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TreeView");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_TreeView_SelectedItem;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.TreeView.SelectedValue":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TreeView");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "SelectedValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_TreeView_SelectedValue;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.TreeView.SelectedValuePath":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.TreeView");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "SelectedValuePath", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_TreeView_SelectedValuePath;
                xamlMember.Setter = set_141_TreeView_SelectedValuePath;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.WatermarkTextStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "WatermarkTextStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_WatermarkTextBox_WatermarkTextStyle;
                xamlMember.Setter = set_142_WatermarkTextBox_WatermarkTextStyle;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.Watermark":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Watermark", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_WatermarkTextBox_Watermark;
                xamlMember.Setter = set_143_WatermarkTextBox_Watermark;
                break;
            case "WinRTXamlToolkit.Controls.WatermarkTextBox.WatermarkText":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WatermarkTextBox");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "WatermarkText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_WatermarkTextBox_WatermarkText;
                xamlMember.Setter = set_144_WatermarkTextBox_WatermarkText;
                break;
            case "WinRTXamlToolkit.Controls.WebBrowser.AutoNavigate":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WebBrowser");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AutoNavigate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_WebBrowser_AutoNavigate;
                xamlMember.Setter = set_145_WebBrowser_AutoNavigate;
                break;
            case "WinRTXamlToolkit.Controls.WebBrowser.Source":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WebBrowser");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Source", "System.Uri");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_WebBrowser_Source;
                xamlMember.Setter = set_146_WebBrowser_Source;
                break;
            case "WinRTXamlToolkit.Controls.WebBrowser.Title":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WebBrowser");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_147_WebBrowser_Title;
                xamlMember.Setter = set_147_WebBrowser_Title;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.ClipToBounds":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ClipToBounds", "Boolean");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_148_FrameworkElementExtensions_ClipToBounds;
                xamlMember.Setter = set_148_FrameworkElementExtensions_ClipToBounds;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.ClipToBoundsHandler":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ClipToBoundsHandler", "WinRTXamlToolkit.Controls.Extensions.ClipToBoundsHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_149_FrameworkElementExtensions_ClipToBoundsHandler;
                xamlMember.Setter = set_149_FrameworkElementExtensions_ClipToBoundsHandler;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.Cursor":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Cursor", "Windows.UI.Core.CoreCursor");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_150_FrameworkElementExtensions_Cursor;
                xamlMember.Setter = set_150_FrameworkElementExtensions_Cursor;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.SystemCursor":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "SystemCursor", "Windows.UI.Core.CoreCursorType");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_151_FrameworkElementExtensions_SystemCursor;
                xamlMember.Setter = set_151_FrameworkElementExtensions_SystemCursor;
                break;
            case "WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions.CursorDisplayHandler":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.Extensions.FrameworkElementExtensions");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CursorDisplayHandler", "WinRTXamlToolkit.Controls.Extensions.CursorDisplayHandler");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_152_FrameworkElementExtensions_CursorDisplayHandler;
                xamlMember.Setter = set_152_FrameworkElementExtensions_CursorDisplayHandler;
                break;
            case "WinRTXamlToolkit.Controls.ListItemButton.Command":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ListItemButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_153_ListItemButton_Command;
                xamlMember.Setter = set_153_ListItemButton_Command;
                break;
            case "WinRTXamlToolkit.Controls.ListItemButton.CommandParameter":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.ListItemButton");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_154_ListItemButton_CommandParameter;
                xamlMember.Setter = set_154_ListItemButton_CommandParameter;
                break;
            case "WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter.TrueIsVisible":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "TrueIsVisible", "Boolean");
                xamlMember.Getter = get_155_NullableBoolToVisibilityConverter_TrueIsVisible;
                xamlMember.Setter = set_155_NullableBoolToVisibilityConverter_TrueIsVisible;
                break;
            case "WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter.IsReversed":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Converters.NullableBoolToVisibilityConverter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsReversed", "Boolean");
                xamlMember.Getter = get_156_NullableBoolToVisibilityConverter_IsReversed;
                xamlMember.Setter = set_156_NullableBoolToVisibilityConverter_IsReversed;
                break;
            case "WinRTXamlToolkit.Converters.NullableBoolToBoolConverter.IsReversed":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Converters.NullableBoolToBoolConverter");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsReversed", "Boolean");
                xamlMember.Getter = get_157_NullableBoolToBoolConverter_IsReversed;
                xamlMember.Setter = set_157_NullableBoolToBoolConverter_IsReversed;
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.PagePresenterStyle":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PagePresenterStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_158_AlternativeFrame_PagePresenterStyle;
                xamlMember.Setter = set_158_AlternativeFrame_PagePresenterStyle;
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.BackStack":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "BackStack", "System.Collections.Generic.Stack<WinRTXamlToolkit.Controls.JournalEntry>");
                xamlMember.Getter = get_159_AlternativeFrame_BackStack;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.CurrentJournalEntry":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CurrentJournalEntry", "WinRTXamlToolkit.Controls.JournalEntry");
                xamlMember.Getter = get_160_AlternativeFrame_CurrentJournalEntry;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.ForwardStack":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ForwardStack", "System.Collections.Generic.Stack<WinRTXamlToolkit.Controls.JournalEntry>");
                xamlMember.Getter = get_161_AlternativeFrame_ForwardStack;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.CurrentSourcePageType":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CurrentSourcePageType", "System.Type");
                xamlMember.Getter = get_162_AlternativeFrame_CurrentSourcePageType;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.CacheSize":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CacheSize", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_163_AlternativeFrame_CacheSize;
                xamlMember.Setter = set_163_AlternativeFrame_CacheSize;
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.PageTransition":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PageTransition", "WinRTXamlToolkit.Controls.PageTransition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_164_AlternativeFrame_PageTransition;
                xamlMember.Setter = set_164_AlternativeFrame_PageTransition;
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.CanGoBack":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CanGoBack", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_165_AlternativeFrame_CanGoBack;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.CanGoForward":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CanGoForward", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_166_AlternativeFrame_CanGoForward;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.CanNavigate":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "CanNavigate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_167_AlternativeFrame_CanNavigate;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.ShouldWaitForImagesToLoad":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ShouldWaitForImagesToLoad", "System.Nullable<Boolean>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_168_AlternativeFrame_ShouldWaitForImagesToLoad;
                xamlMember.Setter = set_168_AlternativeFrame_ShouldWaitForImagesToLoad;
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.BackStackDepth":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "BackStackDepth", "Int32");
                xamlMember.Getter = get_169_AlternativeFrame_BackStackDepth;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AlternativeFrame.ForwardStackDepth":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AlternativeFrame");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "ForwardStackDepth", "Int32");
                xamlMember.Getter = get_170_AlternativeFrame_ForwardStackDepth;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.AnimatingContainer.RotatingContent":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AnimatingContainer");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RotatingContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_AnimatingContainer_RotatingContent;
                xamlMember.Setter = set_171_AnimatingContainer_RotatingContent;
                break;
            case "WinRTXamlToolkit.Controls.AnimatingContainer.RadiusX":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AnimatingContainer");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RadiusX", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_AnimatingContainer_RadiusX;
                xamlMember.Setter = set_172_AnimatingContainer_RadiusX;
                break;
            case "WinRTXamlToolkit.Controls.AnimatingContainer.RadiusY":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AnimatingContainer");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "RadiusY", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_AnimatingContainer_RadiusY;
                xamlMember.Setter = set_173_AnimatingContainer_RadiusY;
                break;
            case "WinRTXamlToolkit.Controls.AnimatingContainer.Duration":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AnimatingContainer");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "Duration", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_AnimatingContainer_Duration;
                xamlMember.Setter = set_174_AnimatingContainer_Duration;
                break;
            case "WinRTXamlToolkit.Controls.AnimatingContainer.PulseScale":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AnimatingContainer");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "PulseScale", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_AnimatingContainer_PulseScale;
                xamlMember.Setter = set_175_AnimatingContainer_PulseScale;
                break;
            case "WinRTXamlToolkit.Controls.AnimatingContainer.AutoPlay":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AnimatingContainer");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "AutoPlay", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_AnimatingContainer_AutoPlay;
                xamlMember.Setter = set_176_AnimatingContainer_AutoPlay;
                break;
            case "WinRTXamlToolkit.Controls.AnimatingContainer.IsAnimating":
                userType = (global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.AnimatingContainer");
                xamlMember = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMember(this, "IsAnimating", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_AnimatingContainer_IsAnimating;
                xamlMember.Setter = set_177_AnimatingContainer_IsAnimating;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlSystemBaseType
    {
        global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


